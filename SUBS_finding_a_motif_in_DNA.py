"""
Hmmm there's probably a faster way
to do this using a greedy method
- use KMP algorithm
"""

DNA = "ACAGAAGCGGGTATCAATAGGAGCAAGAAGCGAGAAGCGCGTCCCAGAAGCGCTAGAAGCGTAGGTGGCCCGAACGCCAGAAGCGTTCAAGGGAAGAAGCGGTAGAAGCGTCGCATAGAAGCGTGGAAGAAGCGTGAAGAAGCGCAGAAGCGGAAGAAGCGAGAAGAAGCGTCAGATAGAAGCGAGTAGAAGCGCGAGAAGCGAGAGAAGCGAGAAGCGAGAAGCGCCGAGAAGCGGTAGAAGCGGAGAAGCGAGCCTAGAAGCGAGTTAGAAGCGGTTAGAAGCGTCACAGAAGCGTCGAAGCGACGGAGAGAAGCGTTTAGCCACAGAAGCGGCATCGTAGAAGCGAGAAGCGTCTGAACGATAATATGAGAAGCGCAGATTAGAAGCGCGCAGAAGCGAGAAGCGGCAGAAGCGCCCCGAGAGAGAAGCGCCTTTAGAAGCGTACCAGAAGCGTAGAAGCGAGAAGCGTAGAAGCGTAGAAGCGCAGAAGCGGGATCAGAAGCGCCCCCGGAGAAGCGAATACGGCATTCTAGAAGCGAGAAGCGTAGAAGCGAGAAGCGTTTAGGCAAGAAGCGAGCCGGCAGAAGCGAAGAAGCGTCCCGGGCCGAGAAGCGTAGAAGCGCAGAAGCGGACAGAAGCGTAGAAGCGATAGAAGCGTCAGAAGCGAGAGAAGCGATGATCTATGGAGAAGCGGTAGAGAAGCGCTGAGAAGCGGATTAGAAGCGAGAAGCGGGAGAAGCGAGAAGCGACAGAAGCGGAAGAAGCGAGAAGCGCATGAGAAGCGAGAAGCGAGAAGCGCAGAAGCGAGAAGCGAAGAAGCGAGAAGCGATCACGAAGAAGCGAAGAAGCGAGAAGCGAAGAAGCGCTTGAGAAGCGTGGCAGAAGCGTTAAGAAGCG"
motif = "AGAAGCGAG"
positions = []

def contains_motif(i):
    for j in range(len(motif)):
        if i + j >= len(DNA):
            return False
        if DNA[i + j] != motif[j]:
            return False
    return True

for i, base in enumerate(DNA):
    if contains_motif(i):
        positions.append(str(i + 1))


print(" ".join(positions))